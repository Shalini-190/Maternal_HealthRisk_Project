# -*- coding: utf-8 -*-
"""Maternal_Health_Risk.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OXFoaTll_Af0GQ9yA0C8u9tYHWelNhjX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import AgglomerativeClustering
from sklearn.mixture import GaussianMixture
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.decomposition import PCA

df = pd.read_csv('/content/Maternal Health Risk Data Set.csv')

print(df.isnull().sum())

df = df.dropna()

features = df.columns[:-1]  # Assuming the last column is the target or label
X = df[features]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

linked = linkage(X_scaled, method='ward')

# Plot the dendrogram
plt.figure(figsize=(10, 7))
dendrogram(linked, orientation='top', distance_sort='descending', show_leaf_counts=False)
plt.title('Dendrogram')
plt.xlabel('Data Points')
plt.ylabel('Euclidean Distance')
plt.show()

n_clusters = 3  # Choose the number of clusters based on the dendrogram
hierarchical_model = AgglomerativeClustering(n_clusters=n_clusters, metric='euclidean', linkage='ward')
df['Hierarchical_Cluster'] = hierarchical_model.fit_predict(X_scaled)

gmm = GaussianMixture(n_components=n_clusters, random_state=42)
df['GMM_Cluster'] = gmm.fit_predict(X_scaled)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
df['PCA1'] = X_pca[:, 0]
df['PCA2'] = X_pca[:, 1]

plt.figure(figsize=(10, 5))
sns.scatterplot(x='PCA1', y='PCA2', hue='Hierarchical_Cluster', data=df, palette='viridis')
plt.title('Hierarchical Clustering')
plt.show()

plt.figure(figsize=(10, 5))
sns.scatterplot(x='PCA1', y='PCA2', hue='GMM_Cluster', data=df, palette='viridis')
plt.title('GMM Clustering')
plt.show()

# Select only numeric columns before computing the mean
numeric_columns = df.select_dtypes(include=[np.number])

# Compute the mean for numeric features grouped by GMM clusters
cluster_summary = numeric_columns.groupby(df['GMM_Cluster']).mean()

print(cluster_summary)

def health_recommendation(cluster):
    if cluster == 0:
        return "Maintain regular check-ups and a balanced diet."
    elif cluster == 1:
        return "Monitor blood pressure regularly and reduce sodium intake."
    elif cluster == 2:
        return "Engage in regular physical activity and manage stress levels."
    else:
        return "Consult with a healthcare provider for personalized advice."

df['Recommendation'] = df['GMM_Cluster'].apply(health_recommendation)

print(df.head())

# Save results to a CSV file
df.to_csv('/content/maternal_health_results.csv', index=False)

print("Results saved as maternal_health_results.csv in /content/")

from google.colab import files
files.download('/content/maternal_health_results.csv')